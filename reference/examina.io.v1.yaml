openapi: 3.0.0
info:
  title: examina.io
  version: '1.0'
  description: "API endpoints to access and create data on examina.io.\n\nWith the APIs you can do just about everything you can using the Manager and probably a little bit more. It strives to be RESTful and so you can also listen listen out for the HTTP response codes.\n\n> While you can use the HTTP response codes from the request, not all success responses are `200`. Some return with `201`. \n\nWe provide a `status` boolean parameter in each response that lets you know if a request was successful or not.\n\n### Authentication\n\nAll requests must be made with your API secret key using Basic Authentication and over HTTPS. See the **Security Schemes** section below for more.\n\n> &#x26a0;&#xfe0f; **Keep your API Secret Secure**<br/>\n  Do not commit your API Secret Key to version control or use it with front-facing client-side code.\n  \nIf a request is made without your Authentication code, you will receive a `401: Unauthorized` HTTP error code.\n\n### Requests and Response\n\nAlmost all requests that require a body/payload are required in JSON format (application/json). \n\nAll responses are returned as JSON. If your HTTP Accept header is set to anything else, you will receive an error response still in JSON format. Since we try to be RESTful, we check to make sure your Accept header is either not set or is set to `*/*` or `application/json`.\n\n```javascript\n{\n  \"code\": \"OK\",\n  \"status\": true,\n  {...}  // The response data\n}\n``` \n*Sample Success response: All success responses take this shape and could include more properties for the response.*\n\n```javascript\n{\n  \"code\": \"ERR\",\n  \"message\": \"Another exam already exists with the Exam Code - 'SAMPLEEXAM'\",\n  \"error\": {\n    \"code\": \"103\",\n    \"id\": \"ERR_103\",\n    \"desc\": \"Invalid state or duplicate request.\"\n  },\n  \"status\": false\n}\n```\n*Sample Error Response: All Error responses take this shape.*\n\n\n### Paginated Responses\n\nSome responses are paginated by default, mostly ones that return a list of exams, examinees or groups. The default format for a paginated response is shown below.\n\n```javascript\n{\n    \"maxPageCount\": 25, // Maximum items per page\n    \"total\": 2,  // Total number items existing\n    \"current\": 2,  // Total items in this response\n    \"code\": \"OK\",\n    \"pages\": 1,  // The number of pages that can be retrieved\n    \"entity\": [...],  // entity can either be groups, examinees or exams\n    \"page\": 1,  // The current page\n    \"status\": true\n}\n```\n\nIn the request, you would be able to specify a path parameter for the page you want to retrieve. The current maximum items per page as seen on `maxPageCount` is 25.  If you are building a paginated application, you should make sure to pay attention to this value as it can change."
  contact:
    name: Ratelsoft Inc.
    url: 'https://www.examina.io/#contact'
    email: info@examina.io
  termsOfService: 'https://www.examina.io/terms'
servers:
  - url: 'https://www.examina.io/api/v1'
paths:
  '/exams/{page}':
    get:
      summary: Get Exams
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Exams.json
              examples:
                Sample paginated response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    exams:
                      - id: 5eea55f4cb305a365eb98850
                        examCode: SAMPLEEXAM
                        examTitle: SAMPLE EXAM
                        version: 1.0.0
                        brandingImage: null
                        brandingColor: null
                        timeAdded: '2020-06-17T17:42:12.687+0000'
                        fileSize: 4378
                        examPaperFlow: Client Controlled
                        settings:
                          visibility: true
                          handheldSettings:
                            allowPhone: true
                            allowTablet: true
                            phoneExamPage: MOBILE
                            tabletExamPage: REGULAR
                          showAnswersAfterExam: false
                          showResultsAfterExam: true
                          requirePreverification: false
                          examiner:
                            Examiner Name: examiner@example.com
                          internetDisconnectionPolicy:
                            onDisconnect: PAUSE_EXAM
                            after: 1
                          inExamLiveProcturing: true
                          proctorPolicy:
                            onDisconnect: LOGOUT_EXAMINEE
                            after: 30
                        papers:
                          - Driving Test: 20
                          - Basic ICT: 20
                        questionsToAnswer:
                          - Driving Test: 10
                          - Basic ICT: 10
                        tags: null
                        mappedExaminees: null
                        examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    pages: 1
                    page: 1
                    status: true
      operationId: get-exams
      description: 'Get all exams created in your organization. Response is paginated and is 1-based. You can specify the optional *page* path param to load exams on that page.'
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: string
        name: page
        in: path
        description: Optional page number to load.
  /exam:
    post:
      summary: Create Exam
      tags:
        - exams
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Response.json
              examples:
                Example Success Response:
                  value:
                    exam:
                      id: 5eea55f4cb305a365eb98850
                      examCode: SAMPLEEXAM
                      examTitle: SAMPLE EXAM
                      version: 1.0.0
                      brandingImage: null
                      brandingColor: null
                      timeAdded: '2020-06-17T17:42:12.687+0000'
                      fileSize: 4378
                      examPaperFlow: Client Controlled
                      settings:
                        visibility: false
                        handheldSettings:
                          allowPhone: false
                          allowTablet: false
                          phoneExamPage: MOBILE
                          tabletExamPage: MOBILE
                        showAnswersAfterExam: false
                        showResultsAfterExam: true
                        requirePreverification: false
                        examiner: null
                        internetDisconnectionPolicy:
                          onDisconnect: DO_NOTHING
                          after: 0
                        inExamLiveProcturing: false
                        proctorPolicy:
                          onDisconnect: DO_NOTHING
                          after: 0
                      papers:
                        - Driving Test: 20
                        - Basic ICT: 20
                      questionsToAnswer:
                        - Driving Test: 10
                        - Basic ICT: 10
                      tags: null
                      mappedExaminees: null
                      examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    code: OK
                    status: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Example Duplicate Exam Code Response:
                  value:
                    code: ERR
                    message: "Another exam already exists with the Exam Code - 'SAMPLEEXAM'"
                    error:
                      code: '103'
                      id: ERR_103
                      desc: Invalid state or duplicate request.
                    status: false
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                File type rejected example response:
                  value:
                    code: ERR
                    message: This file appears to be a Designer Project file. You need to export the exam first from the designer.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
        '500':
          description: Internal Server Error. If any failure occurred while pushing file to file server.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
      operationId: post-exam
      description: 'Create new Exam from .smex file. Request should be sent as *multipart/form-data*'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: 'null'
            examples: {}
        description: 'The **required** Exam .smex file sent as a multipart request with the handle: ***file***'
      security:
        - api apiSecretKey: []
  '/exam/{id}':
    get:
      summary: Get the details of an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Response.json
              examples:
                Sample Success Response:
                  value:
                    exam:
                      id: 5eea55f4cb305a365eb98850
                      examCode: SAMPLEEXAM
                      examTitle: SAMPLE EXAM
                      version: 1.0.0
                      brandingImage: null
                      brandingColor: null
                      timeAdded: '2020-06-17T17:42:12.687+0000'
                      fileSize: 4378
                      examPaperFlow: Client Controlled
                      settings:
                        visibility: true
                        handheldSettings:
                          allowPhone: true
                          allowTablet: true
                          phoneExamPage: MOBILE
                          tabletExamPage: REGULAR
                        showAnswersAfterExam: false
                        showResultsAfterExam: true
                        requirePreverification: false
                        examiner:
                          Examiner Name: examiner@example.com
                        internetDisconnectionPolicy:
                          onDisconnect: PAUSE_EXAM
                          after: 1
                        inExamLiveProcturing: true
                        proctorPolicy:
                          onDisconnect: LOGOUT_EXAMINEE
                          after: 30
                      papers:
                        - Driving Test: 20
                        - Basic ICT: 20
                      questionsToAnswer:
                        - Driving Test: 10
                        - Basic ICT: 10
                      tags: null
                      mappedExaminees: null
                      examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    code: OK
                    status: true
      operationId: 'get-exam-:id'
      description: Get Exam details using either the Exam Code or Exam ID
      parameters: []
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Simple OK Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
        '':
          description: ''
      operationId: 'delete-exam-:id'
      description: Delete an Exam using either the Exam Code or Exam ID
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The Exam Code or Exam ID
  '/examinees/{page}':
    get:
      summary: Get Examinees
      tags:
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Examinees.json
              examples:
                Example Response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    pages: 1
                    examinees:
                      - id: 5ec0b77182ae4f4d01109319
                        examineeCode: RICH
                        passcode: hidden
                        firstName: Richboy
                        middleName: Kaycee
                        lastName: David
                        dob:
                          year: 2011
                          month: 7
                          day: 8
                        gender: 1
                        timeAdded: '2020-05-17T04:02:57.046+0000'
                        imagePath: 'https://url/to/image'
                        phoneNumber: ''
                        email: ''
                        mappedExams:
                          - 5ed05438195e655f28c56f04
                          - 5ed0ff34763d8c506f5c4b45
                        addedGroups:
                          - 5ec030da685c6765d6b440c3
                        proctorApprovedExams: []
                        proctorExemptedExams: null
                        fullName: Richboy Kaycee David
                    page: 1
                    status: true
      operationId: get-examinees
      description: 'This endpoint is paginated. For other pages you need to specify the ***page*** number path parameter.'
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: integer
        name: page
        in: path
        description: An optional page number from which examinees will be retrieved
  '/exams/tag/{tag}/{page}':
    get:
      summary: Get Exams having Tag
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Exams.json
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Error:
                  value:
                    code: ERR
                    message: You can only query for exams one tag at a time. Comma is not allowed here
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: get-exams-tag
      description: 'Find all exams having this tag. This is a paginated response and so an optional *page* number can be added to the request'
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: string
        name: tag
        in: path
        required: true
        description: The exam tag to use for the search
      - schema:
          type: integer
        name: page
        in: path
        description: The page number to load.
  '/exam/{examId}/examinees/{page}':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The Exam ID for the Exam.
      - schema:
          type: string
        name: page
        in: path
        description: The page number to retrieve.
    get:
      summary: Get Examinees mapped to this Exam
      tags:
        - exams
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Examinees.json
              examples:
                Example Success Response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    pages: 1
                    examinees:
                      - id: 5ec0b77182ae4f4d01109319
                        examineeCode: RICH
                        passcode: hidden
                        firstName: Richboy
                        middleName: Kaycee
                        lastName: David
                        dob:
                          year: 2011
                          month: 7
                          day: 8
                        gender: 1
                        timeAdded: '2020-05-17T04:02:57.046+0000'
                        imagePath: 'https://url/to/image'
                        phoneNumber: ''
                        email: ''
                        mappedExams:
                          - 5ed05438195e655f28c56f04
                          - 5ed0ff34763d8c506f5c4b45
                        addedGroups:
                          - 5ec030da685c6765d6b440c3
                        proctorApprovedExams: []
                        proctorExemptedExams: null
                        fullName: Richboy Kaycee David
                    page: 1
                    status: true
      operationId: get-exam-examId-examinees
      description: 'Retrieve Examinees mapped to the exam specified by the *examId*. This returns a paginated response and so an optional page number can be specified.'
      security:
        - api apiSecretKey: []
  '/exam/{examId}/tags':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The Exam ID of the target Exam
    post:
      summary: Add tags to an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    status: true
                    tags:
                      - ratelsoft
                      - examina.io
                      - ratelsoft inc
        '415':
          description: |-
            Unsupported Media Type

            If payload is not of a supported type such as application/json
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: 'text/plain;charset=UTF-8 media type is not supported. Supported media types are application/json, application/hal+json, application/schema+json, application/json-patch+json, application/merge-patch+json, application/x-spring-data-verbose+json, application/x-spring-data-compact+json, application/octet-stream, application/*+json, text/uri-list, text/plain, application/xml, text/xml, application/x-www-form-urlencoded, application/alps+json, application/*+xml, multipart/form-data, multipart/mixed, */*'
                    error:
                      code: '415'
                      id: ERR_415
                      desc: The request or request parameter is invalid or unrecognizable.
                    status: false
        '422':
          description: |-
            Unprocessable Entity

            This response is returned if an empty tag or a tag with commas and/or path separators are found in any of the tags.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: Tags cannot contain commas. Process failed.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: post-exam-examId-tags-tags
      description: |-
        This allows adding tags to an Exam. Tagging an exam gives you flexibility while working with exams. You can later request for exams with a specific tag.

        This returns an array of all the tags currently added to the exam. Duplicate tags are ignored. Tags can have spaces but **no** commas or path separators.

        If an error is discovered in any of the tags, none would be added.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Example Payload:
                value:
                  - ratelsoft inc
                  - examina.io
        description: 'Send a JSON array payload with the tags you want to add to the Exam. This works as a transaction in that if there is any error in one tag, none will be added.'
      parameters:
        - schema:
            type: string
          in: query
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete tags from an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    status: true
                    tags:
                      - ratelsoft
                      - ratelsoft inc
        '415':
          description: |-
            Unsupported Media Type

            If the payload is not of a supported type such as application/json
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Samle Response:
                  value:
                    code: ERR
                    message: 'text/plain;charset=UTF-8 media type is not supported. Supported media types are application/json, application/hal+json, application/schema+json, application/json-patch+json, application/merge-patch+json, application/x-spring-data-verbose+json, application/x-spring-data-compact+json, application/octet-stream, application/*+json, text/uri-list, text/plain, application/xml, text/xml, application/x-www-form-urlencoded, application/alps+json, application/*+xml, multipart/form-data, multipart/mixed, */*'
                    error:
                      code: '415'
                      id: ERR_415
                      desc: The request or request parameter is invalid or unrecognizable.
                    status: false
      operationId: delete-exam-examId-tags-tags
      description: "This allows you to remove tags from an Exam. This returns a response with all the tags currently available in the Exam after the delete. \n\nNo error is reported if a specified tag does not exist as part of the Exam tags.\n\nTags can have spaces but **no** commas or path separators."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Sample Payload:
                value:
                  - examina.io
        description: Send a JSON array payload with the tag(s) you want to remove from Exam.
      security:
        - api apiSecretKey: []
    get:
      summary: Get all tags for an Exam
      operationId: get-exam-examId-tags-tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    status: true
                    tags:
                      - ratelsoft
                      - ratelsoft inc
      description: This retrieves all the tags added to an Exam as an array.
      tags:
        - exams
      security:
        - api apiSecretKey: []
  '/examinee/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: This can either be the ID of the Examinee or the Examinee Code.
    get:
      summary: Get Examinee Details with ID or Code
      tags:
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Single Examinee Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    examinee:
                      id: 5ec0b77182ae4f4d01109319
                      examineeCode: RICH
                      passcode: hidden
                      firstName: Richboy
                      middleName: Kaycee
                      lastName: David
                      dob:
                        year: 2011
                        month: 7
                        day: 8
                      gender: 1
                      timeAdded: '2020-05-17T04:02:57.046+0000'
                      imagePath: 'https://url/to/image'
                      phoneNumber: ''
                      email: ''
                      mappedExams:
                        - 5ed05438195e655f28c56f04
                        - 5ed0ff34763d8c506f5c4b45
                      addedGroups:
                        - 5ec030da685c6765d6b440c3
                      proctorApprovedExams: []
                      proctorExemptedExams: null
                      fullName: Richboy Kaycee David
                    status: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Not Found Error Sample:
                  value:
                    code: ERR
                    message: No such Examinee.
                    error:
                      code: '404'
                      id: ERR_404
                      desc: The requested resource does not exist.
                    status: false
      operationId: get-examinee-id
      description: This allows fetching information about an Examinee using either the Examinee ID or the Examinee Code.
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete an Examinee using ID or Code
      operationId: delete-examinee-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Simple OK Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: No such Examinee.
                    error:
                      code: '404'
                      id: ERR_404
                      desc: The requested resource does not exist.
                    status: false
      description: This allows deleting an Examinee using either the Examinee ID or the Examinee Code.
      tags:
        - examinees
      security:
        - api apiSecretKey: []
  '/examinee/{id}/exams/{page}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The Examinee ID or Code whose mapping information is to be obtained.
      - schema:
          type: string
        name: page
        in: path
        description: An optional page number to load in a paginated response.
    get:
      summary: Get all Exams Mapped to Examinee
      tags:
        - examinees
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Exams.json
              examples:
                Sample Paginated Response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    exams:
                      - id: 5eea55f4cb305a365eb98850
                        examCode: SAMPLEEXAM
                        examTitle: SAMPLE EXAM
                        version: 1.0.0
                        examiner: null
                        visibility: false
                        brandingImage: null
                        brandingColor: null
                        timeAdded: '2020-06-17T17:42:12.687+0000'
                        fileSize: 4378
                        examPaperFlow: Client Controlled
                        showAnswersAfterExam: false
                        showResultsAfterExam: true
                        requirePreverification: false
                        inExamFaceAutoProcturing: false
                        inExamSoundAutoProcturing: false
                        inExamLiveProcturing: false
                        papers:
                          - Driving Test: 20
                          - Basic ICT: 20
                        questionsToAnswer:
                          - Driving Test: 10
                          - Basic ICT: 10
                        tags: null
                        mappedExaminees: null
                        examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    pages: 1
                    page: 1
                    status: true
      operationId: get-examinee-id-exams-page
      description: |-
        Get all the exams mapped to an Examinee using either the Examinee ID or Code as means of matching.

        This is a paginated response and allows specifying an optional page number as path parameter.
      security:
        - api apiSecretKey: []
  '/exam/{examId}/tags/all':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The exam ID for the target Exam.
    delete:
      summary: Delete all tags from an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
                    tags: []
      operationId: delete-exam-examId-tags-all
      description: ''
      security:
        - api apiSecretKey: []
  '/login/exam/{examId}/code/{examineeCode}/token':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The ID of the Exam which the login token is being created for.
      - schema:
          type: string
        name: examineeCode
        in: path
        required: true
        description: The Examinee Code as autogenerated/specified in Manager.
    get:
      summary: Create an Exam Login token for an Examinee with Code
      tags:
        - examinees
        - exams
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Login Token Schema.json
              examples:
                Sample Response:
                  value:
                    expires: '2020-06-18T17:41:24.518+0000'
                    code: OK
                    status: true
                    token: 63m44vhVWQN3cpt2bYfGwS2T624rZzTZ
        '422':
          description: |-
            Unprocessable Entity

            If the specified duration could not be parsed or the time provided is greater than 24 hours.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: The specified duration cannot be understood.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: get-login-exam-examId-code-examineeCode-token
      description: |-
        This endpoint allows you to create a login token to allow Examinee auto login for an exam. This is particularly useful when embedding the client App widget on your website and you do not want the client to login twice.

        This endpoint uses the Examinee Code of the examinee. If you did not specify one when creating the Examinee, one will be autogenerated.
      security:
        - api apiSecretKey: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
            examples:
              In Seconds:
                value:
                  duration: 1440s
              In Minutes:
                value:
                  duration: 30m
              In Hours:
                value:
                  duration: 2h
        description: "You can specify an optional duration. The maximum duration is 24 hrs. By default, the duration would be set to the duration of the Exam. \n\nThe duration is a time string. You can provide in seconds, minutes or hours. **Minutes is recommended**."
  '/login/exam/{examId}/id/{examineeId}/token':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The ID of the Exam which the login token is being created for.
      - schema:
          type: string
        name: examineeId
        in: path
        required: true
        description: The global unique ID for this Examinee.
    get:
      summary: Create an Exam Login Token for an Examinee with ID
      tags:
        - examinees
        - exams
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Login Token Schema.json
              examples:
                Sample Response:
                  value:
                    expires: '2020-06-18T17:41:24.518+0000'
                    code: OK
                    status: true
                    token: 63m44vhVWQN3cpt2bYfGwS2T624rZzTZ
        '422':
          description: |-
            Not Acceptable

            If the specified duration could not be parsed or the time provided is greater than 24 hours.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: The specified duration cannot be understood.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: get-login-exam-examId-id-examineeId-token
      description: |-
        This endpoint allows you to create a login token to allow Examinee auto login for an exam. This is particularly useful when embedding the client App widget on your website and you do not want the client to login twice.

        This endpoint uses the global unique ID of the examinee to create the token.
      security:
        - api apiSecretKey: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
            examples:
              In Minutes:
                value:
                  duration: 30m
              in Hours:
                value:
                  duration: 2h
              In Seconds:
                value:
                  duration: 1440s
        description: "You can specify an optional duration. The maximum duration is 24 hrs. By default, the duration would be set to the duration of the Exam. \n\nThe duration is a time string. You can provide in seconds, minutes or hours. **Minutes is recommended**."
  '/exam/{examId}/settings':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The ID of the target Exam.
    put:
      summary: Replace Exam settings
      tags:
        - exams
      responses:
        '200':
          description: |-
            OK

            Returns the current exam settings.
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Settings Response.json
              examples:
                Sample Success Response:
                  value:
                    settings:
                      visibility: true
                      handheldSettings:
                        allowPhone: true
                        allowTablet: true
                        phoneExamPage: MOBILE
                        tabletExamPage: REGULAR
                      showAnswersAfterExam: false
                      showResultsAfterExam: true
                      requirePreverification: false
                      examiner:
                        Examiner Name: examiner@example.com
                      internetDisconnectionPolicy:
                        onDisconnect: PAUSE_EXAM
                        after: 1
                      inExamLiveProcturing: true
                      proctorPolicy:
                        onDisconnect: LOGOUT_EXAMINEE
                        after: 30
                    code: OK
                    status: true
      operationId: put-exam-examId-settings
      security:
        - api apiSecretKey: []
      description: |-
        This is to replace all of the exam settings. If you do not supply a value for any settings, they would be set to the default.

        All invalid/unrecognized settings are ignored without warning. However, Examiner information is required when `requirePreverification` is enabled.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./raw/Change Exam Settings Schema.json
            examples:
              Sample Payload with all Settings:
                value:
                  visibility: true
                  allowPhone: true
                  allowTablet: true
                  phoneExamPage: MOBILE
                  tabletExamPage: REGULAR
                  showAnswersAfterExam: false
                  showResultsAfterExam: true
                  requirePreverification: false
                  examinerName: Peter Jones
                  examinerEmail: examiner@example.com
                  internetPolicyDisconnect: PAUSE_EXAM
                  internetPolicyAttempts: 1
                  inExamLiveProcturing: true
                  proctorPolicyDisconnect: LOGOUT_EXAMINEE
                  proctorPolicySeconds: 30
        description: |-
          All missing settings are set to their defaults. All invalid settings are silently ignored. However, Examiner information is required when `requirePreverification` is enabled.

          Options for `phoneExamPage` and `tabletExamPage` are `MOBILE` and `REGULAR` and are not case sensitive.

          Options for `internetPolicyDisconnect` and `proctorPolicyDisconnect` are `DO_NOTHING`, `PAUSE_EXAM` and `LOGOUT_EXAMINEE`. The values are not case sensitive and could be without the underscore or be replaced with hyphens and/or spaces. These would also work: `donothing`, `Pause Exam`, `logout-Examinee`.

          The minimum value for `internetPolicyAttempts` is 1.
    get:
      summary: Get Exam Settings
      operationId: get-exam-examId-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Settings Response.json
              examples:
                Sample Success Response:
                  value:
                    settings:
                      visibility: true
                      handheldSettings:
                        allowPhone: true
                        allowTablet: true
                        phoneExamPage: MOBILE
                        tabletExamPage: REGULAR
                      showAnswersAfterExam: false
                      showResultsAfterExam: true
                      requirePreverification: false
                      examiner:
                        Examiner Name: examiner@example.com
                      internetDisconnectionPolicy:
                        onDisconnect: PAUSE_EXAM
                        after: 1
                      inExamLiveProcturing: true
                      proctorPolicy:
                        onDisconnect: LOGOUT_EXAMINEE
                        after: 30
                    code: OK
                    status: true
      description: This allows you to get the current Exam settings for the target Exam.
      tags:
        - exams
      security:
        - api apiSecretKey: []
    patch:
      summary: Change Exam settings
      operationId: patch-exam-examId-settings
      responses:
        '200':
          description: |-
            OK

            Returns the current exam settings.
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Settings Response.json
              examples:
                Sample Response:
                  value:
                    settings:
                      visibility: true
                      handheldSettings:
                        allowPhone: true
                        allowTablet: true
                        phoneExamPage: MOBILE
                        tabletExamPage: REGULAR
                      showAnswersAfterExam: false
                      showResultsAfterExam: true
                      requirePreverification: false
                      examiner:
                        Examiner Name: examiner@example.com
                      internetDisconnectionPolicy:
                        onDisconnect: PAUSE_EXAM
                        after: 1
                      inExamLiveProcturing: true
                      proctorPolicy:
                        onDisconnect: LOGOUT_EXAMINEE
                        after: 30
                    code: OK
                    status: true
      tags:
        - exams
      description: |-
        This is to change some or all of the exam settings. You only need to pass on the settings you want to change and ignore the rest.

        All invalid/unrecognized settings are ignored without warning. However, Examiner information is required when `requirePreverification` is enabled.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./raw/Change Exam Settings Schema.json
            examples:
              Sample Payload:
                value:
                  visibility: true
                  allowPhone: true
                  proctorPolicyDisconnect: LOGOUT_EXAMINEE
                  proctorPolicySeconds: 30
        description: |-
          You only need to pass on the settings you want to modify. All invalid settings are silently ignored. However, Examiner information is required when `requirePreverification` is enabled.

          Options for `phoneExamPage` and `tabletExamPage` are `MOBILE` and `REGULAR` and are not case sensitive.

          Options for `internetPolicyDisconnect` and `proctorPolicyDisconnect` are `DO_NOTHING`, `PAUSE_EXAM` and `LOGOUT_EXAMINEE`. The values are not case sensitive and could be without the underscore or be replaced with hyphens and/or spaces. These would also work: `donothing`, `Pause Exam`, `logout-Examinee`.

          The minimum value for `internetPolicyAttempts` is 1.
      security:
        - api apiSecretKey: []
  /group:
    post:
      summary: Create a new Group
      tags:
        - groups
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./raw/Group Creation Response.json
              examples:
                Sample Success Response:
                  value:
                    code: OK
                    groups:
                      - id: 5efe39249ae73336c03b2b3f
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Juniors
                        desc: Juniors
                        timeAdded: '2020-07-02T19:44:36.062+0000'
                        examinees: null
                    status: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Duplicate Group Error:
                  value:
                    code: ERR
                    message: 'Another Group already exists with the name - "Juniors". No change has been made.'
                    error:
                      code: '409'
                      id: ERR_409
                      desc: Invalid state or duplicate request.
                    status: false
      operationId: post-group
      description: Create a new Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                desc:
                  type: string
              required:
                - name
            examples:
              Example without Group description:
                value:
                  name: Juniors
        description: |-
          `name` is the name of the Group.
          `desc` is optional and is the description for the group. If this is not specified, the name is used as the description.
      security:
        - api apiSecretKey: []
  '/groups/{page}':
    get:
      summary: Get Groups
      operationId: get-groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Groups.json
              examples:
                Sample Response:
                  value:
                    maxPageCount: 25
                    total: 2
                    current: 2
                    code: OK
                    pages: 1
                    groups:
                      - id: 5efe6179183be72cde888e6b
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Seniors
                        desc: A Group for the senior classes
                        timeAdded: '2020-07-02T22:36:41.417+0000'
                        examinees:
                          - 5ec31d64c7c54971270e0d70
                          - 5ec0b77182ae4f4d01109319
                      - id: 5efe39249ae73336c03b2b3f
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Juniors
                        desc: Juniors
                        timeAdded: '2020-07-02T19:44:36.062+0000'
                        examinees: null
                    page: 1
                    status: true
      tags:
        - groups
      description: 'Get all groups added in your organization. Response is paginated and is 1-based. You can specify the optional *page* path param to load groups on that page.'
    parameters:
      - schema:
          type: string
        name: page
        in: path
        description: Only used for the Get request. The page from which to retrive the groups.
  '/group/{groupId}/examinees':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: Get all the Examinees in this Group
      tags:
        - groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  code:
                    type: string
                  examinees:
                    type: array
                    items:
                      type: string
                required:
                  - status
                  - code
                  - examinees
              examples:
                Sample Response:
                  value:
                    code: OK
                    examinees:
                      - 5eefc6f4e23b88151efc9326
                      - 5ec0b77182ae4f4d01109319
                    status: true
      operationId: get-group-groupId-examinees
      security:
        - api apiSecretKey: []
      description: This allows you to get the IDs of all examinees in a Group
    post:
      summary: Add Examinees to a Group
      tags:
        - groups
      responses:
        '200':
          description: |-
            OK

            Returns a response with a list of the examinee IDs that were either added or already members of the group.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  examinees:
                    type: array
                    items:
                      type: string
              examples:
                Sample Success Response:
                  value:
                    code: OK
                    examinees:
                      - 5eefc6f4e23b88151efc9326
                      - 5ec0b77182ae4f4d01109319
                    status: true
      operationId: post-group-groupId-examinees
      security:
        - api apiSecretKey: []
      description: 'This allows you to add examinees to a group. If any examinee does not exist, or is already a member of the group, it is silently ignored.'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Sample Payload:
                value:
                  - 5ec0b77182ae4f4d01109319
                  - 5eefc6f4e23b88151efc9326
        description: You pass a list of Examinee IDs to add to the group.
    delete:
      summary: Remove Examinees from a Group
      tags:
        - groups
      responses:
        '200':
          description: |-
            OK

            Returns a response with a list of the examinee IDs that were found and removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  examinees:
                    type: array
                    description: The examinees found and removed from the group.
                    items:
                      type: string
              examples:
                Sample Response:
                  value:
                    code: OK
                    examinees:
                      - 5eefc6f4e23b88151efc9326
                      - 5ec0b77182ae4f4d01109319
                    status: true
      operationId: delete-group-groupId-examinees
      security:
        - api apiSecretKey: []
      description: |-
        This allows you to remove examinees from a group. Any examinee that was not found will be silently ignored.

        To remove all examinees, send an empty list as the payload.

        Note that this does ***not*** delete the examinees. This only detaches examinees from the group. The group and the examinees would all still exist.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Sample Payload:
                value:
                  - 5ec0b77182ae4f4d01109319
                  - 5eefc6f4e23b88151efc9326
              Remove All Examinees Payload:
                value: []
        description: A list of examinee IDs to remove from the group.
  '/group/{groupId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: Get Group details
      tags:
        - groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  group:
                    $ref: ./raw/Base Group Schema.json
                required:
                  - code
                  - status
                  - group
              examples:
                Sample Success Response:
                  value:
                    code: OK
                    status: true
                    group:
                      id: 5efe6179183be72cde888e6c
                      userId: 5ebcc66b61636c132abecc41
                      creatorName: David Echomgbe
                      name: Applicants July 2020
                      desc: A Group for the July 2020 applicants
                      timeAdded: '2020-07-02T22:36:41.498+0000'
                      examinees:
                        - 5ec0b77182ae4f4d01109319
                        - 5eefc6f4e23b88151efc9326
      operationId: get-group-groupId
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete a Group
      tags:
        - groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Simple OK Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
      operationId: delete-group-groupId
      security:
        - api apiSecretKey: []
      description: This does not delete the examinees in the group. The examinees are removed from the group and then the group is deleted.
  '/group/{groupId}/groups':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    post:
      summary: Add Groups to Group
      tags:
        - groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  examinees:
                    type: array
                    items:
                      type: string
              examples:
                Sample Response:
                  value:
                    code: OK
                    examinees:
                      - 5ec31d64c7c54971270e0d70
                      - 5ec0b77182ae4f4d01109319
                    status: true
      operationId: post-group-groupId-groups
      description: |-
        This allows you to aggregate examinees in one or more groups and add them to a single group. Duplicate examinees are silently ignored. Groups that do not exist are also silently ignored.

        A list of the IDs of all added examinees are returned.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Sample Payload:
                value:
                  - 5ec02dd0685c6765d6b440c1
                  - 5ec030da685c6765d6b440c3
        description: A list of Group IDs from which to get examinees and add to this group.
  '/exam/{examId}/examinee/{examineeId}':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
      - schema:
          type: string
        name: examineeId
        in: path
        required: true
    get:
      summary: Get Exam Examinee Mapping Details
      tags:
        - exams
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  mapping:
                    type: object
                    required:
                      - examineeId
                      - examId
                      - papers
                    properties:
                      examineeId:
                        type: string
                      examId:
                        type: string
                      papers:
                        type: array
                        description: A list of the mapped papers which write.
                        items:
                          type: string
                required:
                  - code
                  - status
                  - mapping
              examples:
                Sample Response:
                  value:
                    mapping:
                      examId: 5ed05438195e655f28c56f04
                      startTime: Anytime
                      papers:
                        - Computer Science
                      examineeId: 5ed05438195e655f28c56f04
                    code: OK
                    status: true
      operationId: get-exam-examId-examinee-examineeId
      description: Get Mapping information for an Examinee.
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete Exam Examinee Mapping
      tags:
        - exams
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Simple OK Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
      operationId: delete-exam-examId-examinee-examineeId
      security:
        - api apiSecretKey: []
      description: Delete Exam mapping for an Examinee
  '/exam/{examId}/examinees':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
    post:
      summary: Map multiple Examinees to an Exam
      tags:
        - exams
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  examinees:
                    type: array
                    items:
                      type: string
                  papers:
                    type: array
                    items:
                      type: string
                  startTime:
                    type: string
                required:
                  - code
                  - status
                  - examinees
                  - papers
                  - startTime
              examples:
                Sample Response:
                  value:
                    code: OK
                    startTime: '2020-12-10T09:30:00.000+00:00'
                    examinees:
                      - 5ec31d64c7c54971270e0d70
                    papers:
                      - General
                    status: true
      operationId: post-exam-examId-examinees
      description: Add multiple examinees to take an exam with same papers and time.
      security:
        - api apiSecretKey: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: A list of Examinee IDs to be mapped.
                  items:
                    type: string
                papers:
                  type: array
                  description: A case-sensitive list of the Paper titles to map.
                  items:
                    type: string
                startTime:
                  type: string
                  description: ISO valid date-time timestamp string for the Start Time for the Exam. You can use `Anytime` to allow examiness to start at anytime.
              required:
                - ids
                - papers
                - startTime
            examples:
              Sample Payload:
                value:
                  ids:
                    - 5ec31d64c7c54971270e0d70
                  papers:
                    - General
                  startTime: '2020-12-10T10:30:00+01:00'
              Map all available papers:
                value:
                  ids:
                    - 5ec31d64c7c54971270e0d70
                  papers: []
                  startTime: Anytime
        description: |-
          The payload is an object with three keys:

          `ids`: The IDs for all the examinees you want to map.

          `papers`: A list of all the papers which the examinees would be taking. **The titles of the papers are case sensitive**. To map all available papers, supply an empty list.

          `startTime`: ISO valid date-time timestamp. If a timezone portion is not supplied, UTC would be assumed. You can also pass on `Anytime` or `null` as the value to allow examinees to take the exam anytime. Seconds and Nano seconds are ignored and always set to 0.

          `startTime` examples:
          1. 2020-12-10T10:30:00
          2. 2020-12-10T10:30:00.000+01:00
          3. 2020-12-10T10:30:00+01:00[Europe/Paris]
          4. Anytime
          5. null

          The supplied `startTime` would be converted to a UTC date-time for the same instant using `Africa/Accra` as reference.
    delete:
      summary: Delete Exam Mapping for multiple Examinees
      tags:
        - exams
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  examinees:
                    type: array
                    items:
                      type: string
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
                    examinees:
                      - 5ec31d64c7c54971270e0d70
                      - 5ec0b77182ae4f4d01109319
      operationId: delete-exam-examId-examinees
      security:
        - api apiSecretKey: []
      description: |-
        This does not delete examinees or exams. It only removes examinees from taking an exam.

        Deleting Exam mapping also deletes the exam results for the selected examinees.

        Any examinee in the payload that does not exist or has not been mapped would be silently skipped. If the payload list is empty, all mapped examinees would be affected.

        The response returns a list of the examinee IDs that existed and were mapped and were unmapped.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Sample Payload:
                value:
                  - 5ec31d64c7c54971270e0d70
                  - 5ec0b77182ae4f4d01109319
              Empty List Payload to Remove all Mapped Examinees:
                value: []
        description: |-
          Accepts an array of examinee ids that are already mapped to this exam.

          To delete mapping for all examinees already mapped to this exam, pass on an empty list.
  /groups:
    post:
      summary: Create multiple Groups
      tags:
        - groups
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./raw/Group Creation Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    groups:
                      - id: 5efe6179183be72cde888e6b
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Seniors
                        desc: A Group for the senior classes
                        timeAdded: '2020-07-02T22:36:41.417+0000'
                        examinees: null
                      - id: 5efe6179183be72cde888e6c
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Applicants July 2020
                        desc: A Group for the July 2020 applicants
                        timeAdded: '2020-07-02T22:36:41.498+0000'
                        examinees: null
                    status: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Duplicate Group Name Response:
                  value:
                    code: ERR
                    message: 'Another Group already exists with the name - "Seniors". No change has been made.'
                    error:
                      code: '409'
                      id: ERR_409
                      desc: Invalid state or duplicate request.
                    status: false
      operationId: post-groups
      security:
        - api apiSecretKey: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  '':
                    type: string
                    description: Description of the group.
                required:
                  - name
            examples:
              Sample Payload:
                value:
                  - name: Seniors
                    desc: A Group for the senior classes
                  - name: Applicants July 2020
                    desc: A Group for the July 2020 applicants
        description: A List of JSON objects with `name` and an optional `desc`
      description: Create multiple Groups at once
  '/exam/{examId}/groups':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
    post:
      summary: Map Examinees in a Group to an Exam
      tags:
        - exams
        - groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  status:
                    type: boolean
                  examinees:
                    type: array
                    items:
                      type: string
                  papers:
                    type: array
                    items:
                      type: string
                  startTime:
                    type: string
              examples:
                Sample Response:
                  value:
                    code: OK
                    startTime: '2020-12-10T10:30:00.000+0000'
                    examinees:
                      - 5eff4a0ee8cc912519e2dbf7
                      - 5eff4a0ee8cc912519e2dbf8
                      - 5eff4a0de8cc912519e2dbe2
                      - 5eff4a0ee8cc912519e2dbf3
                      - 5eff4a0de8cc912519e2dbe1
                      - 5eff4a0ee8cc912519e2dbf4
                      - 5eff4a0ee8cc912519e2dbf5
                      - 5eff4a0de8cc912519e2dbf0
                      - 5eff4a0ee8cc912519e2dbf6
                      - 5eff4a0de8cc912519e2dbef
                      - 5eff4a0de8cc912519e2dbee
                      - 5eff4a0de8cc912519e2dbed
                      - 5eff4a0de8cc912519e2dbec
                      - 5eff4a0de8cc912519e2dbeb
                      - 5eff4a0de8cc912519e2dbea
                      - 5eff4a0de8cc912519e2dbe6
                      - 5eff4a0de8cc912519e2dbe5
                      - 5eff4a0de8cc912519e2dbe4
                      - 5eff4a0ee8cc912519e2dbf1
                      - 5eff4a0de8cc912519e2dbe3
                      - 5eff4a0ee8cc912519e2dbf2
                      - 5eff4a0de8cc912519e2dbe9
                      - 5eff4a0de8cc912519e2dbe8
                      - 5eff4a0de8cc912519e2dbe7
                    papers:
                      - General
                    status: true
      operationId: post-exam-examId-groups
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  description: A list of Group IDs from which to pull examinees to be mapped.
                  items:
                    type: string
                papers:
                  type: array
                  description: A case-sensitive list of the Paper titles to map.
                  items:
                    type: string
                startTime:
                  type: string
                  description: ISO valid date-time timestamp string for the Start Time for the Exam. You can use `Anytime` to allow examiness to start at anytime.
              required:
                - ids
                - papers
                - startTime
            examples:
              Sample Payload:
                value:
                  ids:
                    - 5ec861b33145820f14bb9ba3
                  papers: []
                  startTime: '2020-12-10T10:30:54.567'
        description: |-
          The payload is an object with three keys:

          `ids`: The IDs for all the groups from which all examinees you want to map would be obtained.

          `papers`: A list of all the papers which the examinees would be taking. **The titles of the papers are case sensitive**. To map all available papers, supply an empty list.

          `startTime`: ISO valid date-time timestamp. If a timezone portion is not supplied, UTC would be assumed. You can also pass on `Anytime` or `null` as the value to allow examinees to take the exam anytime. Seconds and Nano seconds are ignored and always set to 0.

          `startTime` examples:
          1. 2020-12-10T10:30:00
          2. 2020-12-10T10:30:00.000+01:00
          3. 2020-12-10T10:30:00+01:00[Europe/Paris]
          4. Anytime
          5. null

          The supplied `startTime` would be converted to a UTC date-time for the same instant using `Africa/Accra` as reference.
      description: ''
      security:
        - api apiSecretKey: []
components:
  schemas: {}
  securitySchemes:
    api apiSecretKey:
      type: http
      scheme: basic
      description: 'This uses a Basic Authentication scheme and is required for all API requests. Username is always ***api*** and password is your API Secret Key.'
