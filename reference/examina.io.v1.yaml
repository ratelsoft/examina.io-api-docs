openapi: 3.0.0
info:
  title: examina.io
  version: '1.0'
  description: API endpoints to access and create data on examina.io
  contact:
    name: examina.io
    url: 'https://www.examina.io/#contact'
    email: info@examina.io
  termsOfService: 'https://www.examina.io/terms'
servers:
  - url: 'https://www.examina.io/api/v1'
paths:
  '/exams/{page}':
    get:
      summary: Get Exams
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Exams.json
              examples:
                Sample paginated response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    exams:
                      - id: 5eea55f4cb305a365eb98850
                        examCode: SAMPLEEXAM
                        examTitle: SAMPLE EXAM
                        version: 1.0.0
                        brandingImage: null
                        brandingColor: null
                        timeAdded: '2020-06-17T17:42:12.687+0000'
                        fileSize: 4378
                        examPaperFlow: Client Controlled
                        settings:
                          visibility: true
                          handheldSettings:
                            allowPhone: true
                            allowTablet: true
                            phoneExamPage: MOBILE
                            tabletExamPage: REGULAR
                          showAnswersAfterExam: false
                          showResultsAfterExam: true
                          requirePreverification: false
                          examiner:
                            Examiner Name: examiner@example.com
                          internetDisconnectionPolicy:
                            onDisconnect: PAUSE_EXAM
                            after: 1
                          inExamLiveProcturing: true
                          proctorPolicy:
                            onDisconnect: LOGOUT_EXAMINEE
                            after: 30
                        papers:
                          - Driving Test: 20
                          - Basic ICT: 20
                        questionsToAnswer:
                          - Driving Test: 10
                          - Basic ICT: 10
                        tags: null
                        mappedExaminees: null
                        examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    pages: 1
                    page: 1
                    status: true
      operationId: get-exams
      description: 'Get all exams created in your organization. Response is paginated and is 1-based. You can specify the optional *page* path param to load exams in that page.'
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: string
        name: page
        in: path
        description: Optional page number to load.
  /exam:
    post:
      summary: Create Exam
      tags:
        - exams
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Response.json
              examples:
                Example Success Response:
                  value:
                    exam:
                      id: 5eea55f4cb305a365eb98850
                      examCode: SAMPLEEXAM
                      examTitle: SAMPLE EXAM
                      version: 1.0.0
                      brandingImage: null
                      brandingColor: null
                      timeAdded: '2020-06-17T17:42:12.687+0000'
                      fileSize: 4378
                      examPaperFlow: Client Controlled
                      settings:
                        visibility: false
                        handheldSettings:
                          allowPhone: false
                          allowTablet: false
                          phoneExamPage: MOBILE
                          tabletExamPage: MOBILE
                        showAnswersAfterExam: false
                        showResultsAfterExam: true
                        requirePreverification: false
                        examiner: null
                        internetDisconnectionPolicy:
                          onDisconnect: DO_NOTHING
                          after: 0
                        inExamLiveProcturing: false
                        proctorPolicy:
                          onDisconnect: DO_NOTHING
                          after: 0
                      papers:
                        - Driving Test: 20
                        - Basic ICT: 20
                      questionsToAnswer:
                        - Driving Test: 10
                        - Basic ICT: 10
                      tags: null
                      mappedExaminees: null
                      examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    code: OK
                    status: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Example Duplicate Exam Code Response:
                  value:
                    code: ERR
                    message: "Another exam already exists with the Exam Code - 'SAMPLEEXAM'"
                    error:
                      code: '103'
                      id: ERR_103
                      desc: Invalid state or duplicate request.
                    status: false
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                File type rejected example response:
                  value:
                    code: ERR
                    message: This file appears to be a Designer Project file. You need to export the exam first from the designer.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
        '500':
          description: Internal Server Error. If any failure occurred while pushing file to file server.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
      operationId: post-exam
      description: 'Create new Exam from .smex file. Request should be sent as *multipart/form-data*'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: 'null'
            examples: {}
        description: 'The **required** Exam .smex file sent as a multipart request with the handle: ***file***'
      security:
        - api apiSecretKey: []
  '/exam/{id}':
    get:
      summary: Retrieve Exam Details
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Response.json
              examples:
                Sample Success Response:
                  value:
                    exam:
                      id: 5eea55f4cb305a365eb98850
                      examCode: SAMPLEEXAM
                      examTitle: SAMPLE EXAM
                      version: 1.0.0
                      brandingImage: null
                      brandingColor: null
                      timeAdded: '2020-06-17T17:42:12.687+0000'
                      fileSize: 4378
                      examPaperFlow: Client Controlled
                      settings:
                        visibility: true
                        handheldSettings:
                          allowPhone: true
                          allowTablet: true
                          phoneExamPage: MOBILE
                          tabletExamPage: REGULAR
                        showAnswersAfterExam: false
                        showResultsAfterExam: true
                        requirePreverification: false
                        examiner:
                          Examiner Name: examiner@example.com
                        internetDisconnectionPolicy:
                          onDisconnect: PAUSE_EXAM
                          after: 1
                        inExamLiveProcturing: true
                        proctorPolicy:
                          onDisconnect: LOGOUT_EXAMINEE
                          after: 30
                      papers:
                        - Driving Test: 20
                        - Basic ICT: 20
                      questionsToAnswer:
                        - Driving Test: 10
                        - Basic ICT: 10
                      tags: null
                      mappedExaminees: null
                      examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    code: OK
                    status: true
      operationId: 'get-exam-:id'
      description: Get Exam details using either the Exam Code or Exam ID
      parameters: []
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Simple OK Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
        '':
          description: ''
      operationId: 'delete-exam-:id'
      description: Delete an Exam using either the Exam Code or Exam ID
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The Exam Code or Exam ID
  '/examinees/{page}':
    get:
      summary: Get Examinees
      tags:
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Examinees.json
              examples:
                Example Response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    pages: 1
                    examinees:
                      - id: 5ec0b77182ae4f4d01109319
                        examineeCode: RICH
                        passcode: hidden
                        firstName: Richboy
                        middleName: Kaycee
                        lastName: David
                        dob:
                          year: 2011
                          month: 7
                          day: 8
                        gender: 1
                        timeAdded: '2020-05-17T04:02:57.046+0000'
                        imagePath: 'https://url/to/image'
                        phoneNumber: ''
                        email: ''
                        mappedExams:
                          - 5ed05438195e655f28c56f04
                          - 5ed0ff34763d8c506f5c4b45
                        addedGroups:
                          - 5ec030da685c6765d6b440c3
                        proctorApprovedExams: []
                        proctorExemptedExams: null
                        fullName: Richboy Kaycee David
                    page: 1
                    status: true
      operationId: get-examinees
      description: 'This endpoint is paginated. For other pages you need to specify the ***page*** number path parameter.'
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: integer
        name: page
        in: path
        description: An optional page number from which examinees will be retrieved
  '/exams/tag/{tag}/{page}':
    get:
      summary: Get Exams having Tag
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Exams.json
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Error:
                  value:
                    code: ERR
                    message: You can only query for exams one tag at a time. Comma is not allowed here
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: get-exams-tag
      description: 'Find all exams having this tag. This is a paginated response and so an optional *page* number can be added to the request'
      security:
        - api apiSecretKey: []
    parameters:
      - schema:
          type: string
        name: tag
        in: path
        required: true
        description: The exam tag to use for the search
      - schema:
          type: integer
        name: page
        in: path
        description: The page number to load.
  '/exam/{examId}/examinees/{page}':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The Exam ID for the Exam.
      - schema:
          type: string
        name: page
        in: path
        description: The page number to retrieve.
    get:
      summary: Get Examinees mapped to this Exam
      tags:
        - exams
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Examinees.json
              examples:
                Example Success Response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    pages: 1
                    examinees:
                      - id: 5ec0b77182ae4f4d01109319
                        examineeCode: RICH
                        passcode: hidden
                        firstName: Richboy
                        middleName: Kaycee
                        lastName: David
                        dob:
                          year: 2011
                          month: 7
                          day: 8
                        gender: 1
                        timeAdded: '2020-05-17T04:02:57.046+0000'
                        imagePath: 'https://url/to/image'
                        phoneNumber: ''
                        email: ''
                        mappedExams:
                          - 5ed05438195e655f28c56f04
                          - 5ed0ff34763d8c506f5c4b45
                        addedGroups:
                          - 5ec030da685c6765d6b440c3
                        proctorApprovedExams: []
                        proctorExemptedExams: null
                        fullName: Richboy Kaycee David
                    page: 1
                    status: true
      operationId: get-exam-examId-examinees
      description: 'Retrieve Examinees mapped to the exam specified by the *examId*. This returns a paginated response and so an optional page number can be specified.'
      security:
        - api apiSecretKey: []
  '/exam/{examId}/tags':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The Exam ID of the target Exam
    post:
      summary: Add tags to an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    status: true
                    tags:
                      - ratelsoft
                      - examina.io
                      - ratelsoft inc
        '415':
          description: |-
            Unsupported Media Type

            If payload is not of a supported type such as application/json
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: 'text/plain;charset=UTF-8 media type is not supported. Supported media types are application/json, application/hal+json, application/schema+json, application/json-patch+json, application/merge-patch+json, application/x-spring-data-verbose+json, application/x-spring-data-compact+json, application/octet-stream, application/*+json, text/uri-list, text/plain, application/xml, text/xml, application/x-www-form-urlencoded, application/alps+json, application/*+xml, multipart/form-data, multipart/mixed, */*'
                    error:
                      code: '415'
                      id: ERR_415
                      desc: The request or request parameter is invalid or unrecognizable.
                    status: false
        '422':
          description: |-
            Unprocessable Entity

            This response is returned if an empty tag or a tag with commas and/or path separators are found in any of the tags.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: Tags cannot contain commas. Process failed.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: post-exam-examId-tags-tags
      description: |-
        This allows adding tags to an Exam. Tagging an exam gives you flexibility while working with exams. You can later request for exams with a specific tag.

        This returns an array of all the tags currently added to the exam. Duplicate tags are ignored. Tags can have spaces but **no** commas or path separators.

        If an error is discovered in any of the tags, none would be added.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Example Payload:
                value:
                  - ratelsoft inc
                  - examina.io
        description: 'Send a JSON array payload with the tags you want to add to the Exam. This works as a transaction in that if there is any error in one tag, none will be added.'
      parameters:
        - schema:
            type: string
          in: query
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete tags from an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    status: true
                    tags:
                      - ratelsoft
                      - ratelsoft inc
        '415':
          description: |-
            Unsupported Media Type

            If the payload is not of a supported type such as application/json
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Samle Response:
                  value:
                    code: ERR
                    message: 'text/plain;charset=UTF-8 media type is not supported. Supported media types are application/json, application/hal+json, application/schema+json, application/json-patch+json, application/merge-patch+json, application/x-spring-data-verbose+json, application/x-spring-data-compact+json, application/octet-stream, application/*+json, text/uri-list, text/plain, application/xml, text/xml, application/x-www-form-urlencoded, application/alps+json, application/*+xml, multipart/form-data, multipart/mixed, */*'
                    error:
                      code: '415'
                      id: ERR_415
                      desc: The request or request parameter is invalid or unrecognizable.
                    status: false
      operationId: delete-exam-examId-tags-tags
      description: "This allows you to remove tags from an Exam. This returns a response with all the tags currently available in the Exam after the delete. \n\nNo error is reported if a specified tag does not exist as part of the Exam tags.\n\nTags can have spaces but **no** commas or path separators."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
            examples:
              Sample Payload:
                value:
                  - examina.io
        description: Send a JSON array payload with the tag(s) you want to remove from Exam.
      security:
        - api apiSecretKey: []
    get:
      summary: Get all tags for an Exam
      operationId: get-exam-examId-tags-tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    status: true
                    tags:
                      - ratelsoft
                      - ratelsoft inc
      description: This retrieves all the tags added to an Exam as an array.
      tags:
        - exams
      security:
        - api apiSecretKey: []
  '/examinee/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: This can either be the ID of the Examinee or the Examinee Code.
    get:
      summary: Get Examinee Details with ID or Code
      tags:
        - examinees
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Single Examinee Response.json
              examples:
                Example Response:
                  value:
                    code: OK
                    examinee:
                      id: 5ec0b77182ae4f4d01109319
                      examineeCode: RICH
                      passcode: hidden
                      firstName: Richboy
                      middleName: Kaycee
                      lastName: David
                      dob:
                        year: 2011
                        month: 7
                        day: 8
                      gender: 1
                      timeAdded: '2020-05-17T04:02:57.046+0000'
                      imagePath: 'https://url/to/image'
                      phoneNumber: ''
                      email: ''
                      mappedExams:
                        - 5ed05438195e655f28c56f04
                        - 5ed0ff34763d8c506f5c4b45
                      addedGroups:
                        - 5ec030da685c6765d6b440c3
                      proctorApprovedExams: []
                      proctorExemptedExams: null
                      fullName: Richboy Kaycee David
                    status: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Not Found Error Sample:
                  value:
                    code: ERR
                    message: No such Examinee.
                    error:
                      code: '404'
                      id: ERR_404
                      desc: The requested resource does not exist.
                    status: false
      operationId: get-examinee-id
      description: This allows fetching information about an Examinee using either the Examinee ID or the Examinee Code.
      security:
        - api apiSecretKey: []
    delete:
      summary: Delete an Examinee using ID or Code
      operationId: delete-examinee-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Simple OK Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: No such Examinee.
                    error:
                      code: '404'
                      id: ERR_404
                      desc: The requested resource does not exist.
                    status: false
      description: This allows deleting an Examinee using either the Examinee ID or the Examinee Code.
      tags:
        - examinees
      security:
        - api apiSecretKey: []
  '/examinee/{id}/exams/{page}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The Examinee ID or Code whose mapping information is to be obtained.
      - schema:
          type: string
        name: page
        in: path
        description: An optional page number to load in a paginated response.
    get:
      summary: Get all Exams Mapped to Examinee
      tags:
        - examinees
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Paginated Exams.json
              examples:
                Sample Paginated Response:
                  value:
                    maxPageCount: 25
                    total: 1
                    current: 1
                    code: OK
                    exams:
                      - id: 5eea55f4cb305a365eb98850
                        examCode: SAMPLEEXAM
                        examTitle: SAMPLE EXAM
                        version: 1.0.0
                        examiner: null
                        visibility: false
                        brandingImage: null
                        brandingColor: null
                        timeAdded: '2020-06-17T17:42:12.687+0000'
                        fileSize: 4378
                        examPaperFlow: Client Controlled
                        showAnswersAfterExam: false
                        showResultsAfterExam: true
                        requirePreverification: false
                        inExamFaceAutoProcturing: false
                        inExamSoundAutoProcturing: false
                        inExamLiveProcturing: false
                        papers:
                          - Driving Test: 20
                          - Basic ICT: 20
                        questionsToAnswer:
                          - Driving Test: 10
                          - Basic ICT: 10
                        tags: null
                        mappedExaminees: null
                        examLink: 'https://www.examina.io/client/5eea55f4cb305a365eb98850'
                    pages: 1
                    page: 1
                    status: true
      operationId: get-examinee-id-exams-page
      description: |-
        Get all the exams mapped to an Examinee using either the Examinee ID or Code as means of matching.

        This is a paginated response and allows specifying an optional page number as path parameter.
      security:
        - api apiSecretKey: []
  '/exam/{examId}/tags/all':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The exam ID for the target Exam.
    delete:
      summary: Delete all tags from an Exam
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Exam Tags Response.json
              examples:
                Sample Response:
                  value:
                    code: OK
                    status: true
                    tags: []
      operationId: delete-exam-examId-tags-all
      description: ''
      security:
        - api apiSecretKey: []
  '/login/exam/{examId}/code/{examineeCode}/token':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The ID of the Exam which the login token is being created for.
      - schema:
          type: string
        name: examineeCode
        in: path
        required: true
        description: The Examinee Code as autogenerated/specified in Manager.
    get:
      summary: Create an Exam Login token for an Examinee with Code
      tags:
        - examinees
        - exams
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Login Token Schema.json
              examples:
                Sample Response:
                  value:
                    expires: '2020-06-18T17:41:24.518+0000'
                    code: OK
                    status: true
                    token: 63m44vhVWQN3cpt2bYfGwS2T624rZzTZ
        '422':
          description: |-
            Unprocessable Entity

            If the specified duration could not be parsed or the time provided is greater than 24 hours.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: The specified duration cannot be understood.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: get-login-exam-examId-code-examineeCode-token
      description: |-
        This endpoint allows you to create a login token to allow Examinee auto login for an exam. This is particularly useful when embedding the client App widget on your website and you do not want the client to login twice.

        This endpoint uses the Examinee Code of the examinee. If you did not specify one when creating the Examinee, one will be autogenerated.
      security:
        - api apiSecretKey: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
            examples:
              In Seconds:
                value:
                  duration: 1440s
              In Minutes:
                value:
                  duration: 30m
              In Hours:
                value:
                  duration: 2h
        description: "You can specify an optional duration. The maximum duration is 24 hrs. By default, the duration would be set to the duration of the Exam. \n\nThe duration is a time string. You can provide in seconds, minutes or hours. **Minutes is recommended**."
  '/login/exam/{examId}/id/{examineeId}/token':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The ID of the Exam which the login token is being created for.
      - schema:
          type: string
        name: examineeId
        in: path
        required: true
        description: The global unique ID for this Examinee.
    get:
      summary: Create an Exam Login Token for an Examinee with ID
      tags:
        - examinees
        - exams
        - client
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Login Token Schema.json
              examples:
                Sample Response:
                  value:
                    expires: '2020-06-18T17:41:24.518+0000'
                    code: OK
                    status: true
                    token: 63m44vhVWQN3cpt2bYfGwS2T624rZzTZ
        '422':
          description: |-
            Not Acceptable

            If the specified duration could not be parsed or the time provided is greater than 24 hours.
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Response:
                  value:
                    code: ERR
                    message: The specified duration cannot be understood.
                    error:
                      code: '422'
                      id: ERR_422
                      desc: Incorrect parameter specified.
                    status: false
      operationId: get-login-exam-examId-id-examineeId-token
      description: |-
        This endpoint allows you to create a login token to allow Examinee auto login for an exam. This is particularly useful when embedding the client App widget on your website and you do not want the client to login twice.

        This endpoint uses the global unique ID of the examinee to create the token.
      security:
        - api apiSecretKey: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
            examples:
              In Minutes:
                value:
                  duration: 30m
              in Hours:
                value:
                  duration: 2h
              In Seconds:
                value:
                  duration: 1440s
        description: "You can specify an optional duration. The maximum duration is 24 hrs. By default, the duration would be set to the duration of the Exam. \n\nThe duration is a time string. You can provide in seconds, minutes or hours. **Minutes is recommended**."
  '/exam/{examId}/settings':
    parameters:
      - schema:
          type: string
        name: examId
        in: path
        required: true
        description: The ID of the target Exam.
    put:
      summary: Change some or all of the Exam settings
      tags:
        - exams
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Settings Response.json
              examples:
                Sample Success Response:
                  value:
                    settings:
                      visibility: true
                      handheldSettings:
                        allowPhone: true
                        allowTablet: true
                        phoneExamPage: MOBILE
                        tabletExamPage: REGULAR
                      showAnswersAfterExam: false
                      showResultsAfterExam: true
                      requirePreverification: false
                      examiner:
                        Examiner Name: examiner@example.com
                      internetDisconnectionPolicy:
                        onDisconnect: PAUSE_EXAM
                        after: 1
                      inExamLiveProcturing: true
                      proctorPolicy:
                        onDisconnect: LOGOUT_EXAMINEE
                        after: 30
                    code: OK
                    status: true
      operationId: put-exam-examId-settings
      security:
        - api apiSecretKey: []
      description: |-
        This is to change some or all of the exam settings. You only need to pass on the settings you want to change and ignore the rest.

        All invalid/unrecognized settings are ignored without warning.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./raw/Base Exam Settings Schema.json
            examples:
              Sample Payload with all Settings:
                value:
                  visibility: true
                  allowPhone: true
                  allowTablet: true
                  phoneExamPage: MOBILE
                  tabletExamPage: REGULAR
                  showAnswersAfterExam: false
                  showResultsAfterExam: true
                  requirePreverification: false
                  examinerName: Peter Jones
                  examinerEmail: examiner@example.com
                  internetPolicyDisconnect: PAUSE_EXAM
                  internetPolicyAttempts: 1
                  inExamLiveProcturing: true
                  proctorPolicyDisconnect: LOGOUT_EXAMINEE
                  proctorPolicySeconds: 30
        description: |-
          You only need to pass on the settings you want to modify. All invalid settings are silently ignored.

          Options for `phoneExamPage` and `tabletExamPage` are `MOBILE` and `REGULAR` and are not case sensitive.

          Options for `internetPolicyDisconnect` and `proctorPolicyDisconnect` are `DO_NOTHING`, `PAUSE_EXAM` and `LOGOUT_EXAMINEE`. The values are not case sensitive and could be without the underscore or be replaced with hyphens and/or spaces. These would also work: `donothing`, `Pause Exam`, `logout-Examinee`.

          The minimum value for `internetPolicyAttempts` is 1.
    get:
      summary: Get Exam Settings
      operationId: get-exam-examId-settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./raw/Single Exam Settings Response.json
              examples:
                Sample Success Response:
                  value:
                    settings:
                      visibility: true
                      handheldSettings:
                        allowPhone: true
                        allowTablet: true
                        phoneExamPage: MOBILE
                        tabletExamPage: REGULAR
                      showAnswersAfterExam: false
                      showResultsAfterExam: true
                      requirePreverification: false
                      examiner:
                        Examiner Name: examiner@example.com
                      internetDisconnectionPolicy:
                        onDisconnect: PAUSE_EXAM
                        after: 1
                      inExamLiveProcturing: true
                      proctorPolicy:
                        onDisconnect: LOGOUT_EXAMINEE
                        after: 30
                    code: OK
                    status: true
      description: This allows you to get the current Exam settings for the target Exam.
      tags:
        - exams
  /group:
    post:
      summary: Create a new Group
      tags:
        - groups
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./raw/Group Creation Response.json
              examples:
                Sample Success Response:
                  value:
                    code: OK
                    groups:
                      - id: 5efe39249ae73336c03b2b3f
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Juniors
                        desc: Juniors
                        timeAdded: '2020-07-02T19:44:36.062+0000'
                        examinees: null
                    status: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Duplicate Group Error:
                  value:
                    code: ERR
                    message: 'Another Group already exists with the name - "Juniors". No change has been made.'
                    error:
                      code: '409'
                      id: ERR_409
                      desc: Invalid state or duplicate request.
                    status: false
      operationId: post-group
      description: Create a new Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                desc:
                  type: string
              required:
                - name
            examples:
              Example without Group description:
                value:
                  name: Juniors
        description: |-
          `name` is the name of the Group.
          `desc` is optional and is the description for the group. If this is not specified, the name is used as the description.
  /groups:
    post:
      summary: Create multiple Groups at once
      tags:
        - groups
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ./raw/Group Creation Response.json
              examples:
                Example Success Response:
                  value:
                    code: OK
                    groups:
                      - id: 5efe6179183be72cde888e6b
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Seniors
                        desc: A Group for the senior classes
                        timeAdded: '2020-07-02T22:36:41.417+0000'
                        examinees: null
                      - id: 5efe6179183be72cde888e6c
                        userId: 5ebcc66b61636c132abecc41
                        creatorName: David Echomgbe
                        name: Applicants July 2020
                        desc: A Group for the July 2020 applicants
                        timeAdded: '2020-07-02T22:36:41.498+0000'
                        examinees: null
                    status: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: ./raw/Error Format.json
              examples:
                Sample Duplicate Group Error:
                  value:
                    code: ERR
                    message: 'Another Group already exists with the name - "Seniors". No change has been made.'
                    error:
                      code: '409'
                      id: ERR_409
                      desc: Invalid state or duplicate request.
                    status: false
      operationId: post-groups
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  desc:
                    type: string
                required:
                  - name
            examples:
              Sample Payload:
                value:
                  - name: Seniors
                    desc: A Group for the senior classes
                  - name: Applicants July 2020
                    desc: A Group for the July 2020 applicants
        description: A List of JSON objects with `name` and an optional `desc`
      description: Create multiple Groups at once.
components:
  schemas: {}
  securitySchemes:
    api apiSecretKey:
      type: http
      scheme: basic
      description: 'This uses a Basic Authentication scheme and is required for all API requests. Username is always ***api*** and password is your API Secret Key.'
